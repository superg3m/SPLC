struct_interface HashMap<$Key, $Value> {
    u32 count;
    u32 capacity;
    $Key[..] keys;
    $Value[..] values;

    @global HashMap<$Key, $Value> create();
    void insert($Key key, $Value value);
    $Value* find($Key key);
    bool remove($Key key);

    @global $Key[..] keys_array(HashMap<$Key, $Value> map);
    @global $Value[..] values_array(HashMap<$Key, $Value> map);
};

int test($Key, int g) {
    #assert(typeof($Key) == int);
}

struct_impl HashMap<$Key, $Value> {
    HashMap<$Key, $Value> create() {
        HashMap<$Key, $Value> ret;
        ret.count = 0;
        ret.capacity = 16;
        ret.keys = malloc(sizeof($Key) * ret.capacity);
        ret.values = malloc(sizeof($Value) * ret.capacity);

        return ret;
    }

    void insert($Key key, $Value value) {
        assert(self.count < self.capacity);
        u32 index = hash_function(key) % self.capacity;
        
        // Linear probing for collision resolution
        while (self.keys[index] != NULL && self.keys[index] != key) {
            index = (index + 1) % self.capacity;
        }

        self.keys[index] = key;
        self.values[index] = value;
        self.count++;
    }

    $Value* find($Key key) {
        u32 index = hash_function(key) % self.capacity;

        while (self.keys[index] != NULL) {
            if (self.keys[index] == key) {
                return &self.values[index];
            }
            index = (index + 1) % self.capacity;
        }

        return NULL;
    }

    bool remove($Key key) {
        u32 index = hash_function(key) % self.capacity;

        while (self.keys[index] != NULL) {
            if (self.keys[index] == key) {
                self.keys[index] = NULL;
                self.values[index] = NULL;
                self.count--;
                return true;
            }
            index = (index + 1) % self.capacity;
        }

        return false;
    }

    $Key* keys_array(HashMap<$Key, $Value> map) {
        return map.keys;
    }

    $Value* values_array(HashMap<$Key, $Value> map) {
        return map.values;
    }
};

int main() {
    HashMap<string, int> map = HashMap.create();
    bool condition = map.has("Hello");

    if "test" == "testings" {
        // This has to be able to do string compares without having to do
        // ckit_str_equal("test" == "testings");
    }

    return condition;
}