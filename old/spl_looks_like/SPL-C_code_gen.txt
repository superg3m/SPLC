struct_interface Vector<int dim> {
    #assert(dim >= 0);
    #assert(dim <= 4);
    union {
        struct {
            @insert_if(dim >= 1) double x;
            @insert_if(dim >= 2) double y;
            @insert_if(dim >= 3) double z;
            @insert_if(dim == 4) double w;
        };

        double data[dim];
    }

    float dot(Vector v2);
    @no_self int compare(Vector v1, Vector v2);
}

struct_impl Vector<int dim> {
    float dot(Vector v2) {
        #assert(typeof(self) == typeof(v2))

    }

    int compare(Vector v1, Vector v2) {
        #assert(typeof(v1) == typeof(v2)) // self don't exist in this context

    }
}

typedef Vector<3> Vector3;
typedef Vector<4> Vector4;
Vector4 v = {5.0};
Vector3 v2;

v.dot(v2) // self is implicit

typeof(v2) f = {5};

// This is tough I might not do this right now
void polymorphic_test(DynamicArray d1, DynamicArray d2) {
    #assert(typeof(d1) == typeof(d2)) // DynamicArray<int> == DynamicArray<int>


}

DynamicArray<String> test_dynamic_array = DynamicArray.create()
test.push("Hello");

int test[..];

test.push()
test.pop()
test.insert()
test.delete()

---------------------------------------------------------------------------------
generated c file

typedef enum SPL_TYPE_ATLAS { // The reason for this is when I do typeof(x) its going to replace it with a enum
    // SPL reserved types
    INT = 0,
    FLOAT,
    U32,
    ...

    // user created types and typedefs
    vector-3-_afassfdsfftew = 24,
    vector3 = 24,
    vector-4-_afafagsdgtew = 25,
    vector4 = 25
} SPL_TYPE_ATLAS;

typedef struct vector-4-_afafagsdgtew {
    union {
        struct {
            double x;
            double y;
            double z;
            double w;
        };

        double data[dim];
    };
} vector-4-_afafagsdgtew;

typdef struct vector-3-_afassfdsfftew { // The type is mangled and hashed
    union {
        struct {
            double x;
            double y;
            double z;
            double w;
        };

        double data[dim];
    };
} vector-3-_afassfdsfftew;

float dot(vector-3-_afassfdsfftew* self,  vector-3-_afassfdsfftew v2) {


}

int compare(Vector v1, Vector v2) {
    #assert(typeof(self) == typeof(v2))

}

typedef Vector<3> Vector3;
typedef Vector<4> Vector4;

Vector4 v; // this is going to get compiled to v.x = 5.0, ...
v.x = 5.0;
v.y = 5.0;
v.z = 5.0;
v.w = 5.0;



Vector3 v2;
v2.x = 0;
v2.y = 0;
v2.z = 0;
dot(v, v2)

Vector3 f; // typeof(v2) f = {5}; -> typeof(v2) is baked into the c file
f.x = 0;
f.y = 0;
f.z = 0;

